"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class polytopes_t(object):
    __slots__ = ["id", "highlighted", "remove", "num_vertices", "V"]

    def __init__(self):
        self.id = 0
        self.highlighted = False
        self.remove = False
        self.num_vertices = 0
        self.V = [ [] for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(polytopes_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ibbi", self.id, self.highlighted, self.remove, self.num_vertices))
        for i0 in range(3):
            buf.write(struct.pack('>%dd' % self.num_vertices, *self.V[i0][:self.num_vertices]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != polytopes_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return polytopes_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = polytopes_t()
        self.id = struct.unpack(">i", buf.read(4))[0]
        self.highlighted = bool(struct.unpack('b', buf.read(1))[0])
        self.remove = bool(struct.unpack('b', buf.read(1))[0])
        self.num_vertices = struct.unpack(">i", buf.read(4))[0]
        self.V = []
        for i0 in range(3):
            self.V.append(struct.unpack('>%dd' % self.num_vertices, buf.read(self.num_vertices * 8)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if polytopes_t in parents: return 0
        tmphash = (0x830752e49b0b20a0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if polytopes_t._packed_fingerprint is None:
            polytopes_t._packed_fingerprint = struct.pack(">Q", polytopes_t._get_hash_recursive([]))
        return polytopes_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

