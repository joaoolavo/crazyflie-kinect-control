"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class kalman_out_t(object):
    __slots__ = ["kalman_xyz", "kalman_dxyz", "smooth_xyz", "smooth_dxyz", "smooth_xyz_noblackout", "smooth_dxyz_noblackout"]

    def __init__(self):
        self.kalman_xyz = [ 0.0 for dim0 in range(3) ]
        self.kalman_dxyz = [ 0.0 for dim0 in range(3) ]
        self.smooth_xyz = [ 0.0 for dim0 in range(3) ]
        self.smooth_dxyz = [ 0.0 for dim0 in range(3) ]
        self.smooth_xyz_noblackout = [ 0.0 for dim0 in range(3) ]
        self.smooth_dxyz_noblackout = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(kalman_out_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3d', *self.kalman_xyz[:3]))
        buf.write(struct.pack('>3d', *self.kalman_dxyz[:3]))
        buf.write(struct.pack('>3d', *self.smooth_xyz[:3]))
        buf.write(struct.pack('>3d', *self.smooth_dxyz[:3]))
        buf.write(struct.pack('>3d', *self.smooth_xyz_noblackout[:3]))
        buf.write(struct.pack('>3d', *self.smooth_dxyz_noblackout[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != kalman_out_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kalman_out_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kalman_out_t()
        self.kalman_xyz = struct.unpack('>3d', buf.read(24))
        self.kalman_dxyz = struct.unpack('>3d', buf.read(24))
        self.smooth_xyz = struct.unpack('>3d', buf.read(24))
        self.smooth_dxyz = struct.unpack('>3d', buf.read(24))
        self.smooth_xyz_noblackout = struct.unpack('>3d', buf.read(24))
        self.smooth_dxyz_noblackout = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kalman_out_t in parents: return 0
        tmphash = (0x287f15c2714bf551) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kalman_out_t._packed_fingerprint is None:
            kalman_out_t._packed_fingerprint = struct.pack(">Q", kalman_out_t._get_hash_recursive([]))
        return kalman_out_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

